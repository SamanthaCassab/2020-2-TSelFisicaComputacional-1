
# Tipos/Estructuras en Julia

Vimos que **todo**, en Julia, tiene asociado un tipo o estructura. Aquí veremos varias formas de crear tipos que se acomoden a lo que necesitamos, y algunos trucos para que la ejecución sea rápida. La importancia de los tipos radica, como vimos, en el hecho que la elección del método depende del tipo de sus argumentos.

La convención a la hora de definir tipos es que estén escritos en estilo de "camello", es decir, en que la primer letra de cada palabra empieza en mayúscula. Por ejemplo, tenemos `Float64`, `AbstractFloat`.

Es importante decir que los tipos **no** pueden ser redefinidos o sobreescritos en una sesión de Julia; para hacerlo, hay que iniciar una nueva sesión o reiniciar el Kernel (para el Jupyter notebook).

## Tipos inmutables y constructores internos

```julia
struct MiTipo end
```

Para crear un objeto del tipo `MiTipo` se requiere un *constructor*, que sencillamente es una función que devuelve un objeto del tipo especificado.

```julia
methods(MiTipo)
```

La estructura que acabamos de definir **no** contiene ningún tipo de datos, por lo que se llama "singleton". Este tipo de estructuras se utilizan para cuestiones de *dispatch*.

```julia
mt = MiTipo()
```

```julia
typeof(mt)
```

```julia
mt isa MiTipo
```

En general, cuando definimos un tipo nuevo es para que contenga cierto tipo de datos.

```julia
struct Partic1d
    x :: Float64
    v :: Float64
end
```

Por cuestiones de eficiencia es conveniente que los tipos sean concretos; uno puede definir tipos con parámetros, como veremos más adelante. 

Es importante aclarar que las distintas componentes de un tipo pueden tener distintos tipos asociados.

El método que por default crea a un objeto tipo `Partic1d` requiere que especifiquemos *en el mismo orden* todos los *campos* que lo componen.

```julia
p1 = Partic1d(1.0, -2.4)
```

```julia
# p1.<TA>
p1.x
```

El tipo de estructura que acabamos de crear es *inmutable*, lo que significa que los campos individuales (cuando son *concretos*), no se pueden cambiar.

```julia
isimmutable(p1)
```

```julia
p1.x = 2.0
```

La propiedad de inmutabilidad no es recursiva; así, si un objeto consiste de algún campo que es mutable (por ejemplo, `Array{T,N}`, entonces las componentes individuales de ese campo pueden cambiar.

```julia
struct Partic2d
    x :: Array{Float64,1}
    v :: Array{Float64,1}
    function Partic2d(x :: Array{Float64,1}, v :: Array{Float64,1})
        @assert length(x) == length(v) == 2
        return new(x, v)
    end
end
```

La función que aparece en el interior redefine el constructor de default, y se llama *constructor interno*. Hay que notar que *sólo* en este caso se utiliza el comando `new` (ya que el tipo de objeto no existe).

```julia
p2 = Partic2d([1.0, 2.5], [1.0, 3.0])
```

No se puede cambiar *el objeto en si* (por ser inmutable), pero sí sus componentes.

```julia
p2.x = [2, 1]
```

```julia
p2.x[1] = 6.0
```

```julia
p2.x .= [2, 1]
```

```julia
p2
```

## Tipos mutables

Todo lo dicho anteriormente se puede extender para definir tipos mutables. La única diferencia es que a la hora de definirlos, debemos usar `mutable struct`.

```julia
mutable struct MPartic2d
    x :: Array{Float64,1}
    v :: Array{Float64,1}
    function MPartic2d(x :: Array{Float64,1}, v :: Array{Float64,1})
        @assert length(x) == length(v) == 2
        return new(x, v)
    end
end
```

```julia
mp2 = MPartic2d([1.0, 2.5], [1.0, 3.0])
```

```julia
mp2.x = [2, 1]
```

```julia
mp2
```

## Constructores paramétricos

En ocasiones uno quiere definir estructuras que operen con distinto tipo de entradas. Un ejemplo son los vectores: tenemos `Array{Int,1}` y *también* `Array{Float64,1}`, e incluso `Array{Float64 2}`. 

En el ejemplo anterior, `Partic2d` la definimos con campos que son vectores `Array{Float64,1}`, por lo que usar otro tipo de vectores da un error.

```julia
Partic2D([1, 2], [1, 3])
```

En principio uno *podría* usar en la definición de los campos que componen al tipo, tipos abstractos, como `Real`. Sin embargo, dado que el compilador *no* conoce la estructura en memoria de tipos abstractos, el código será ineficiente. Un ejemplo de código ineficiente, entonces, sería:
    ```julia
    struct Partic3d
        x :: Array{Real,1}
        v :: Array{Real,1}
    end
    ```

La alternativa es definir estructuras *paramétricas*, donde precisamente el parámetro es un tipo concreto (sin especificar) que es subtipo de algún tipo abstracto.

```julia
struct Partic3d{T <: Real}
    x :: Array{T,1}
    v :: Array{T,1}
    function Partic3d(x :: Array{T,1}, v :: Array{T,1}) where {T}
        @assert length(x) == length(v) == 3
        return new{T}(x, v)
    end
end
```

En cierto sentido, en la definición anterior de `Partic3d{T}` la `T` adquiere un tipo concreto que es la que se utiliza en los campos donde se requiere especificar.

```julia
Partic3d([1,2,3], [2,3,4])
```

```julia
Partic3d([1.5,2,3], [2.5,3,4])
```

Dado el árbol de tipos, uno puede lograr a partir del propio diseño del tipo, cierta clase de sobrecarga de operadores, y por lo mismo, la posibilidad de aplicar ciertas funciones a la estructura que hemos creado. Esta propiedad se aplica a todos los tipos que uno define; si uno no especifica el supertipo, éste se considera `Any`.

```julia
struct MiVector2d{T <: Real} <: AbstractArray{T,1}
    x :: T
    y :: T
end
```

```julia
x = MiVector2d(1, 2)
```

El error indica algo *aparentemente* "no relacionado" con lo que hemos hecho, y que tiene que ver con la visualización de `x`. Notemos, por ejemplo, que `x.x` y `x.y` son lo que deben ser! De hecho, `x` ha sido *definido*.

```julia
x.x, x.y
```

```julia
isdefined(Main, :x)
```

Para hacernos la vida más sencilla a la hora de visualizar `MiVector2d`, sobrecargaremos `size` y `getindex`, siguiendo la recomendación de [la documentación](https://docs.julialang.org/en/v1.3/manual/interfaces/#man-interface-array-1).

```julia
import Base: size
size(::MiVector2d{T}) where {T} = (2,)

function Base.getindex(v::MiVector2d, i::Int)
    if i == 1
        return v.x
    elseif i == 2
        return v.y
    else
        throw(AssertError)
    end
end
```

```julia
x
```

```julia
y = MiVector2d(1.2, 2.1)
```

A pesar de que **no** hemos sobrecargado la suma (`:+`), funciona gracias a la estructura de tipo que hemos impuesto a `MiVector2d`.

```julia
x + y
```

Sin embargo, hay que notar que el resultado es un `Array{Float64,1}` y no un `MiVector2d{Float64}`. Para logar que el resultado sea del tipo que queremos, sobrecargamos la función `:+`.

```julia
Base.:+(x::MiVector2d, y::MiVector2d) = MiVector2d((x .+ y)...)
```

```julia
x + y
```

Este ejemplo *no* es un ejemplo muy interesante, pero muestra que Julia permite adecuar las cosas a lo que requerimos, y que permite *extender* a Julia para que la interacción sea sencilla.
